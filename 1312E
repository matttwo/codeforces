#include <cstring>
#include <string>
#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <functional>
#include <unordered_map>
#include <map>
#include <stack>
#include <queue>
using namespace std;
#define REP(i,n) for(int i=0;i<(n);++i)
#define FOR(i,a,b) for(int i=(a);i<=(b);++i)
#define FORD(i,a,b) for(int i=(a);i>=(b);--i)
#define PB push_back
#define ar array
typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;

// const ll INF = 0x3f3f3f3f3f3f3f3fLL;
const int INF = 0x3f3f3f3f;
const int mxN = 501;
int n, dp[mxN], dp1[mxN][mxN];
vector<int> v;

int main() {
	ios::sync_with_stdio(false);
	cin>>n;
	v.PB(0);
	FOR(i, 1, n){
		int a;
		cin>>a;
		v.PB(a);
	}
	FOR(i, 0, n){
		dp[i]=i;
	}
	FOR(i, 1, n)
		dp1[i][i]=v[i];
	FOR(i, 2, n){ //i is the length of [l, r], so r-l = i-1
		FOR(j, 1, n-i+1){
			FOR(k, j, j+i-2){
				if(dp1[j][k] && dp1[j][k] == dp1[k+1][j+i-1]){
					dp1[j][j+i-1]=dp1[j][k]+1;
				}
			}
		}
	}
	//we can loop through positions 1 to n
	//dp[i] stores the minimum number of partitions of [1,..,i]
	//dp[i] = 1+min(dp[x1], ... dp[xk]) where 1<=x1,...,xk<=i-1 and v[x_j,...i] is valid
	FOR(i, 2, n){
		FOR(j, 1, i){
			if(dp1[j][i]){
				dp[i]=min(dp[i], 1+dp[j-1]);
			}
		}
	}
	cout<<dp[n];
	return 0
}
